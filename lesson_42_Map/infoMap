
Map — это интерфейс, который представляет коллекцию пар "ключ-значение".
То есть, в Map каждый элемент состоит из ключа и значения, где ключ уникален,
а значения могут быть одинаковыми для разных ключей. Это похож на телефонный справочник,
где по имени (ключ) можно найти номер телефона (значение).

Основные характеристики Map:
===============================
1. Уникальные ключи: В Map не может быть двух одинаковых ключей.
2. Значения могут повторяться: Значения могут повторяться, так как их можно
привязать к разным ключам.
3. Поиск по ключу: В отличие от обычных коллекций (например, списков), в Map
вы можете быстро искать элементы по ключу

Основные методы интерфейса Map:
================================
- put(K key, V value) — добавляет пару ключ-значение. // map.put("key1", "value1");
- get(Object key) — возвращает значение, связанное с ключом (или null, если ключ не найден).
- remove(Object key) — удаляет пару по ключу.
- containsKey(Object key) — проверяет, существует ли такой ключ в Map.
- containsValue(Object value) — проверяет, существует ли хотя бы одно значение в Map.
- keySet() — возвращает все ключи в виде набора (Set).
- values() — возвращает все значения в виде коллекции.
- size() — возвращает количество пар "ключ-значение" в Map.
- isEmpty() — проверяет, пуст ли Map. // map.isEmpty(); // true, если Map пуст
- clear() — удаляет все элементы из Map.
- keySet() — возвращает множество всех ключей в Map (тип возвращаемого значения — Set<K>).
- entrySet() — возвращает множество пар ключ-значение
(тип возвращаемого значения — Set<Map.Entry<K, V>>), что позволяет пройтись по элементам
в цикле.
- putIfAbsent(K key, V value) — добавляет пару ключ-значение только в том случае,
если для данного ключа ещё не существует значения.
map.putIfAbsent("key2", "value2"); // если "key2" ещё нет, то добавит пару
- replace(K key, V value) — заменяет значение по ключу, если ключ уже существует.
Возвращает старое значение или null, если ключ не найден.
map.replace("key1", "newValue"); // заменяет значение для ключа "key1"
- replace(K key, V oldValue, V newValue) — заменяет значение по ключу только если оно
совпадает с указанным старым значением.
map.replace("key1", "oldValue", "newValue"); // заменит значение, если текущее
значение = "oldValue"
- forEach(BiConsumer<? super K, ? super V> action) — позволяет пройтись по всем
парам ключ-значение и выполнить действие для каждой пары.
map.forEach((key, value) -> System.out.println(key + ": " + value));
- compute(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction) —
позволяет изменить значение для ключа на основе текущего значения.
map.compute("key1", (key, value) -> value == null ? "default" : value + " updated");
- computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) —
добавляет пару, если для данного ключа ещё нет значения.
- computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction) —
добавляет пару, если для данного ключа ещё нет значения.
map.computeIfAbsent("key1", key -> "generatedValue");
// если "key1" нет, создаст значение
- merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction) —
объединяет два значения для одного ключа, если ключ уже существует, или добавляет новый.
map.merge("key1", "newValue", (oldValue, newValue) -> oldValue + " merged with " + newValue);
- putAll(Map<? extends K, ? extends V> m) — добавляет все пары из другой коллекции Map
в текущий Map.
   Map<String, String> otherMap = new HashMap<>();
   otherMap.put("key2", "value2");
   map.putAll(otherMap); // добавит все пары из otherMap в map

Map — это полезная структура данных для хранения и быстрого поиска информации,
где данные связаны с уникальными ключами. В Java реализовано несколько типов Map
(например, HashMap, TreeMap, LinkedHashMap)